{"version":3,"sources":["footer/footer.module.scss","style.module.scss","serviceWorker.js","header/index.jsx","content/index.js","footer/index.jsx","store/index.js","index.js","content/content.module.scss","header/header.module.scss"],"names":["module","exports","footer","app","Boolean","window","location","hostname","match","Header","_ref","user","react","className","style","header","Content","observer","props","react_default","a","createElement","content","buttons","concat","state","userFullData","onClick","setAge","setUser","Footer","userStore","observable","age","this","action","bound","computed","name","configure","enforceActions","App","mobx_react_devtools_default","header_Header","footer_Footer","Component","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,OAAA,4CCAlBF,EAAAC,QAAA,CAAkBE,IAAA,uLCWEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,gGCfOC,EAAS,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACrB,OACIC,EAAA,wBAAQC,UAAWC,IAAMC,QAAzB,uJACiCJ,oBCWlC,MAAMK,EAAUC,mBAbvB,SAAqBC,GACjB,OACIC,EAAAC,EAAAC,cAAA,OAAKR,UAAWC,IAAMQ,SAClBH,EAAAC,EAAAC,cAAA,OAAKR,UAAWC,IAAMS,SAAtB,GAAAC,OACQN,EAAMO,MAAMC,cAChBP,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAMT,EAAMO,MAAMG,OAAO,KAA1C,iDAFJ,GAAAJ,OAGQN,EAAMO,MAAMd,MAChBQ,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAMT,EAAMO,MAAMI,QAAQ,aAA3C,2CCRHC,EAAS,WAClB,OACIlB,EAAA,wBAAQC,UAAWC,IAAMZ,QAAzB,4BCHK6B,EAAYC,qBAAW,CAChCC,IAAK,EACLtB,KAAM,SAENkB,QAJgC,SAIxBlB,GACJuB,KAAKvB,KAAOA,GAGhBiB,OARgC,SAQzBK,GACHC,KAAKD,IAAMC,KAAKD,IAAMA,GAG1BP,mBACI,SAAAF,OAAUU,KAAKvB,KAAf,KAAAa,OAAuBU,KAAKD,OAEjC,CACCL,OAAQO,SAAOC,MACfP,QAASM,SAAOC,MAChBV,aAAcW,YACf,CACCC,KAAM,cCVVC,oBAAU,CAACC,eAAgB,iBAGrBC,EADLxB,sMAGY,IACWN,EAAUuB,KAAKhB,MAAxBO,MAASd,KAEhB,OACIQ,EAAAC,EAAAC,cAAA,OAAKR,UAAWC,IAAMX,KAClBgB,EAAAC,EAAAC,cAACqB,EAAAtB,EAAD,MAEAD,EAAAC,EAAAC,cAACsB,EAAD,CAAQhC,KAAMA,IACdQ,EAAAC,EAAAC,cAACL,EAAD,CAASS,MAAOM,IAChBZ,EAAAC,EAAAC,cAACuB,EAAD,cAXEC,iBAiBlBC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,CAAKvB,MAAOM,IAAekB,SAASC,eAAe,SLiG7D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCMlInBxD,EAAAC,QAAA,CAAkBqB,QAAA,yBAAAC,QAAA,6CCAlBvB,EAAAC,QAAA,CAAkBc,OAAA","file":"static/js/main.b3ced768.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"footer_footer__3A9Xk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"style_app__1fisG\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport style from './header.module.scss';\r\n\r\nexport const Header = ({ user }) => {\r\n    return (\r\n        <header className={style.header}>\r\n            В шапке ставим пользователя {user}\r\n        </header>\r\n    )\r\n};","import React from 'react';\r\nimport {observer} from 'mobx-react'\r\nimport style from './content.module.scss';\r\n\r\nfunction ContentComp(props) {\r\n    return (\r\n        <div className={style.content}>\r\n            <div className={style.buttons}>\r\n                {`${props.state.userFullData}`}\r\n                <button onClick={() => props.state.setAge(1)}>возраст +1</button>\r\n                {`${props.state.user}`}\r\n                <button onClick={() => props.state.setUser('Michail')}>Имя</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Content = observer(ContentComp);\r\n","import * as React from 'react';\r\nimport style from './footer.module.scss';\r\n\r\nexport const Footer = () => {\r\n    return (\r\n        <footer className={style.footer}>\r\n            Footer\r\n        </footer>\r\n    )\r\n};","import {observable, action, computed} from 'mobx'\r\n\r\nexport const userStore = observable({\r\n    age: 0,\r\n    user: 'Vasili',\r\n\r\n    setUser(user){\r\n        this.user = user\r\n    },\r\n\r\n    setAge(age){\r\n        this.age = this.age + age\r\n    },\r\n\r\n    get userFullData(){\r\n        return `${this.user} ${this.age}`\r\n    }\r\n}, {\r\n    setAge: action.bound,\r\n    setUser: action.bound,\r\n    userFullData: computed\r\n}, {\r\n    name: 'userStore'\r\n});","import React, {Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {observer} from 'mobx-react';\r\nimport {configure} from 'mobx';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport DevTools from 'mobx-react-devtools';\r\nimport {Header} from \"./header/index\";\r\nimport {Content} from \"./content\";\r\nimport {Footer} from \"./footer\";\r\nimport style from \"./style.module.scss\";\r\nimport {userStore} from \"./store/index\";\r\n\r\nconfigure({enforceActions: 'observed'});\r\n\r\n@observer\r\nclass App extends Component {\r\n\r\n    render() {\r\n        const {state: { user }} = this.props;\r\n\r\n        return (\r\n            <div className={style.app}>\r\n                <DevTools />\r\n\r\n                <Header user={user}/>\r\n                <Content state={userStore}/>\r\n                <Footer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(<App state={userStore} />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"content_content__3SN0Y\",\"buttons\":\"content_buttons__2oHtq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__1-nBZ\"};"],"sourceRoot":""}